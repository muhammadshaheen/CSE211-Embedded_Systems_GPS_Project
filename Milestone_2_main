///////////////////////////////////////////// UART 5 Handling (GPS) /////////////////////////////////////////////

void UART5_Init(void){
  SYSCTL_RCGCUART_R |= 0x20;
    SYSCTL_RCGCGPIO_R |= 0x10;
    UART5_CTL_R &= ~0x01;          //disable UART5 to initialize uart 5 
    UART5_IBRD_R = 104;
    UART5_FBRD_R = 11;
    UART5_LCRH_R  |= 0x60;
    UART5_CTL_R |= 0x301;          //enable UART5
    GPIO_PORTE_AFSEL_R |= 0x30;
    GPIO_PORTE_PCTL_R = (GPIO_PORTE_PCTL_R & ~0x00FF0000) | 0x00110000;
    GPIO_PORTE_DEN_R |= 0x30;
}


char UART5InputChar(void){                          // to read a Character from uart 5
    while((UART5_FR_R & 0x10) != 0);
    return (char)(UART5_DR_R & 0xFF);
}


void Get_GPS_Reading(char* Reading_GPS){          // to GET Readings from GPS through uart 5
    char character;
    bool cond = false;
    int n = 0;
    delayMs(2000);             // delay between each reading 2 seconds due to the gps fix
    Red_Led_On(0x08);          //Lighting Green Led at the beginning of each reading
    while(1){
        character = UART5InputChar();   // reading one char from uart 5
        if((int)character == 0x2A){          // end writing the reading if char = (*)
            cond = false;
            n = 0;                        //to rest index of arry of char
            break;
        }
        if(cond == true)                // start writing the reading if char = ($)
        {
            Reading_GPS[n] = character;
            UART_OutChar1(Reading_GPS[n]); // send the character which tiva read from GPS to computer (Putty)
             n = n + 1;
        }
        if((int)character == 0x24){           // set the condition of statring a new reading
            cond = true;
        }
    }

              Red_Led_On(0x04);      //Lighting blue at the endf each reading
}

/////////////////////////////////////////////// Parsing GPS Longitude////////////////////////////////////

float parsing_GPS_long(char* s){

    int i;
      int j;
    char y[12];
        char flag;
    int long_deg;
      float min;
      float longii;
      double longi;
        j=0;
    flag = s[43];


for(i=31;i<42;i++)
    {
        y[j]=s[i];
        j++;
    }
    y[11] = '\0';
    longi = atof(y);


   long_deg = longi/100;
    longi -= long_deg*100;
    min = longi/60.0;
    longii = long_deg + min;


    if(flag == 'W')
    {
        longii *= -1;
    }

    return longii;
    
}

///////////////////////////////////////////// Float to String Conversion /////////////////////////////////////////////

void ftoa(float n, char* res, int afterpoint)
{ int neg_flag;
    char ser[20];
    int yyy;
    float fpart;
    int ipart;
    int i;
    neg_flag = 0;
    if (n<0){
       n=n*-1;
         neg_flag = 1;
    }
    // Extract integer part
    ipart = (int)n;

    // Extract floating part
    fpart = n - (float)ipart;

    // convert integer part to string
   i = intToStr(ipart, res, 0);

    // check for display option after point
    if (afterpoint != 0) {
        res[i] = '.'; // add dot

        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter
        // is needed to handle cases like 233.007
        fpart = fpart * pow(10, afterpoint);

        intToStr((int)fpart, res + i + 1, afterpoint);

    }
        if(neg_flag==1){
                ser[0] = '-';
                strcat(ser, res);
                strcpy(res,ser);
              for(yyy=0;yyy<20;yyy++){
                    ser[yyy] = '\0';
                }
            }
}

///////////////////////////////////////////// Directions Detection /////////////////////////////////////////////

void Navigation(float long1, float lat1, float long2, float lat2){

  float  delta_lat = lat2  - lat1;
  float delta_long =   long2  - long1;
  if (delta_lat>0 && delta_long>0){    //////NE
      print_string("NE");
  }
  if (delta_lat<0 && delta_long>0){    //////SE
      print_string("SE");
   }

  if (delta_lat>0 && delta_long<0){    //////NW
      print_string("NW");
   }

  if (delta_lat<0 && delta_long<0){    //////SW
      print_string("SW");
   }
  /////////////////
  if (delta_lat==0 && delta_long>0){    //////E
      print_string("E");
  }
  if (delta_lat<0 && delta_long==0){    //////S
      print_string("S");
   }

  if (delta_lat==0 && delta_long<0){    //////N
      print_string("N");
   }

  if (delta_lat<0 && delta_long==0){    //////S
      print_string("S");
   }
}

