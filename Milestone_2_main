///////////////////////////////////////////// Delay Handling /////////////////////////////////////////////

// delay n milliseconds (16 MHz CPU clock)
void delayMs(int times){
    int j;
    for (j = 0; j < times; j++){
    NVIC_ST_CTRL_R = 0x00000000;
    NVIC_ST_RELOAD_R = 0x00003E7F;
    NVIC_ST_CURRENT_R = 0x00000000;
    NVIC_ST_CTRL_R = 0x05;
    while ((NVIC_ST_CTRL_R & 0x00010000) == 0);
    }
}


// delay n microseconds (16 MHz CPU clock)
void delayUs(int times2){
    int j;
    for (j = 0; j < times2; j++){
    NVIC_ST_CTRL_R = 0x00000000;
    NVIC_ST_RELOAD_R = 0x0000000F;
    NVIC_ST_CURRENT_R = 0x00000000;
    NVIC_ST_CTRL_R = 0x05;
    while ((NVIC_ST_CTRL_R & 0x00010000) == 0);
    }
}

///////////////////////////////////////////// UART 5 Handling (GPS) /////////////////////////////////////////////

void UART5_Init(void){
  SYSCTL_RCGCUART_R |= 0x20;
    SYSCTL_RCGCGPIO_R |= 0x10;
    UART5_CTL_R &= ~0x01;          //disable UART5 to initialize uart 5 
    UART5_IBRD_R = 104;
    UART5_FBRD_R = 11;
    UART5_LCRH_R  |= 0x60;
    UART5_CTL_R |= 0x301;          //enable UART5
    GPIO_PORTE_AFSEL_R |= 0x30;
    GPIO_PORTE_PCTL_R = (GPIO_PORTE_PCTL_R & ~0x00FF0000) | 0x00110000;
    GPIO_PORTE_DEN_R |= 0x30;
}


char UART5InputChar(void){                          // to read a Character from uart 5
    while((UART5_FR_R & 0x10) != 0);
    return (char)(UART5_DR_R & 0xFF);
}


void Get_GPS_Reading(char* Reading_GPS){          // to GET Readings from GPS through uart 5
    char character;
    bool cond = false;
    int n = 0;
    delayMs(2000);             // delay between each reading 2 seconds due to the gps fix
    Red_Led_On(0x08);          //Lighting Green Led at the beginning of each reading
    while(1){
        character = UART5InputChar();   // reading one char from uart 5
        if((int)character == 0x2A){          // end writing the reading if char = (*)
            cond = false;
            n = 0;                        //to rest index of arry of char
            break;
        }
        if(cond == true)                // start writing the reading if char = ($)
        {
            Reading_GPS[n] = character;
            UART_OutChar1(Reading_GPS[n]); // send the character which tiva read from GPS to computer (Putty)
             n = n + 1;
        }
        if((int)character == 0x24){           // set the condition of statring a new reading
            cond = true;
        }
    }

              Red_Led_On(0x04);      //Lighting blue at the endf each reading
}

///////////////////////////////////////////// UART 0 Handling (Communication with PC (Putty)) /////////////////////////////////////////////

void UART_Init(void){
  SYSCTL_RCGCUART_R |= 0x01;
    SYSCTL_RCGCGPIO_R |= 0x01;
    UART0_CTL_R &= ~0x01; //disable UART0
    UART0_IBRD_R = 104;
    UART0_FBRD_R = 11;
    UART0_LCRH_R |= 0x70;
    UART0_CTL_R |= 0x301; //enable UART0
    GPIO_PORTA_AFSEL_R |= 0x03;
    GPIO_PORTA_PCTL_R = (GPIO_PORTA_PCTL_R & ~0xFF) | 0x00000011;
    GPIO_PORTA_DEN_R |= 0x03;
}


void UART_OutChar1(char data){             //Sending one character to PC (Putty) through uart 0
      while((UART0_FR_R & 0x20) != 0);
      UART0_DR_R = data;
}


void UART_OutChar(char* data){            //Sending String to PC (Putty) through uart 0
    int i;
    for (i=0; i < strlen(data); i++){
      UART0_DR_R = data[i];
    }
}

///////////////////////////////////////////// UART 7 Handling (Bluetooth Module) /////////////////////////////////////////////

void UART7Init(void){
    SYSCTL_RCGCUART_R |= 0x80;
    SYSCTL_RCGCGPIO_R |= 0x10;
    UART7_CTL_R = 0;
    UART7_IBRD_R = 104;
    UART7_FBRD_R = 11;
    UART7_LCRH_R  |= 0x70;
    UART7_CTL_R |= 0x301;
    GPIO_PORTE_AFSEL_R |= 0x03;
    GPIO_PORTE_PCTL_R = (GPIO_PORTE_PCTL_R & ~0x000000FF) | 0x00000011;
    GPIO_PORTE_DEN_R |= 0x03;
}


char UART7InputChar(void){
    while((UART7_FR_R & 0x10) != 0);
    return (char)(UART7_DR_R & 0xFF);
}


void Get_UART7_Bluetooth(char* command_bluetoooth){
    char character;
    int i = 0;
    for(i = 0; i < 7; i++){
            character = UART7InputChar();
            command_bluetoooth[i] = character;
            UART_OutChar1(character);
        }
}


void UART7_bluetooth_Send_Char(char data){
      while((UART0_FR_R & 0x20) != 0);
      UART7_DR_R = data;

}


void Send_UART7_Bluetooth(char* data){
    int i;
    for (i = 0; i < strlen(data); i++){
      UART7_DR_R = data[i];
    }
}

///////////////////////////////////////////// Parsing GPS Output String /////////////////////////////////////////////

float parsing_GPS_lat(char* s){

    int i;
      int j;
      char x[11];
      char flag;
      double lat;
       int lat_deg;
      float min;
      float lati;
        j=0;
    flag = s[29];
for(i=18;i<28;i++)
{
    x[j]=s[i];
    j++;
}

    x[10] = '\0';

    lat = atof(x);

    lat_deg =(int) lat/100;
    lat -= lat_deg*100;
    min = lat/60.0;
    lati = lat_deg + min;

    if(flag == 'S')
    {
        lati *= -1;
    }

    return lati;
}

float parsing_GPS_long(char* s){

    int i;
      int j;
    char y[12];
        char flag;
    int long_deg;
      float min;
      float longii;
      double longi;
        j=0;
    flag = s[43];


for(i=31;i<42;i++)
    {
        y[j]=s[i];
        j++;
    }
    y[11] = '\0';
    longi = atof(y);


   long_deg = longi/100;
    longi -= long_deg*100;
    min = longi/60.0;
    longii = long_deg + min;


    if(flag == 'W')
    {
        longii *= -1;
    }

    return longii;
    
}

/////////////////////////////////////////////// Integer to string conversion //////////////////////////////////////////////

int intToStr(int x, char str[], int d)
{
    int i = 0;
    while (x) {
        str[i++] = (x % 10) + '0';
        x = x / 10;
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
        str[i++] = '0';

    reverse(str, i);
    str[i] = '\0';
    return i;
}

///////////////////////////////////////////// Float to String Conversion /////////////////////////////////////////////

// C program for implementation of ftoa()
// Reverses a string 'str' of length 'len'
void reverse(char* str, int len)
{
    int i = 0, j = len - 1, temp;
    while (i < j) {
        temp = str[i];
        str[i] = str[j];
        str[j] = temp;
        i++;
        j--;
    }
}


void ftoa(float n, char* res, int afterpoint)
{ int neg_flag;
    char ser[20];
    int yyy;
    float fpart;
    int ipart;
    int i;
    neg_flag = 0;
    if (n<0){
       n=n*-1;
         neg_flag = 1;
    }
    // Extract integer part
    ipart = (int)n;

    // Extract floating part
    fpart = n - (float)ipart;

    // convert integer part to string
   i = intToStr(ipart, res, 0);

    // check for display option after point
    if (afterpoint != 0) {
        res[i] = '.'; // add dot

        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter
        // is needed to handle cases like 233.007
        fpart = fpart * pow(10, afterpoint);

        intToStr((int)fpart, res + i + 1, afterpoint);

    }
        if(neg_flag==1){
                ser[0] = '-';
                strcat(ser, res);
                strcpy(res,ser);
              for(yyy=0;yyy<20;yyy++){
                    ser[yyy] = '\0';
                }
            }
}


///////////////////////////////////////////// Directions Detection /////////////////////////////////////////////

void Navigation(float long1, float lat1, float long2, float lat2){

  float  delta_lat = lat2  - lat1;
  float delta_long =   long2  - long1;
  if (delta_lat>0 && delta_long>0){    //////NE
      print_string("NE");
  }
  if (delta_lat<0 && delta_long>0){    //////SE
      print_string("SE");
   }

  if (delta_lat>0 && delta_long<0){    //////NW
      print_string("NW");
   }

  if (delta_lat<0 && delta_long<0){    //////SW
      print_string("SW");
   }
  /////////////////
  if (delta_lat==0 && delta_long>0){    //////E
      print_string("E");
  }
  if (delta_lat<0 && delta_long==0){    //////S
      print_string("S");
   }

  if (delta_lat==0 && delta_long<0){    //////N
      print_string("N");
   }

  if (delta_lat<0 && delta_long==0){    //////S
      print_string("S");
   }
}

